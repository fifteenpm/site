/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { draco } from 'drei'

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, '/main.glb', draco('/draco-gltf/'))

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      insideout1: mixer.clipAction(animations[0], group.current),
      insideout2: mixer.clipAction(animations[1], group.current),
      insideout3: mixer.clipAction(animations[2], group.current),
      mate1: mixer.clipAction(animations[3], group.current),
      mate2: mixer.clipAction(animations[4], group.current),
      mate3: mixer.clipAction(animations[5], group.current),
      roses1: mixer.clipAction(animations[6], group.current),
      roses2: mixer.clipAction(animations[7], group.current),
      roses3: mixer.clipAction(animations[8], group.current),
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.mixamorigHips} />
      <skinnedMesh
        material={nodes.Ch43_Mesh.material}
        geometry={nodes.Ch43_Mesh.geometry}
        skeleton={nodes.Ch43_Mesh.skeleton}
      />
      <skinnedMesh
        material={nodes.Cube_Cube001.material}
        geometry={nodes.Cube_Cube001.geometry}
        skeleton={nodes.Cube_Cube001.skeleton}
      />
      <skinnedMesh material={nodes.Plane.material} geometry={nodes.Plane.geometry} skeleton={nodes.Plane.skeleton} />
      <skinnedMesh
        material={nodes.Plane001.material}
        geometry={nodes.Plane001.geometry}
        skeleton={nodes.Plane001.skeleton}
      />
      <skinnedMesh
        material={nodes.Plane002.material}
        geometry={nodes.Plane002.geometry}
        skeleton={nodes.Plane002.skeleton}
      />
      <skinnedMesh
        material={nodes.Plane003.material}
        geometry={nodes.Plane003.geometry}
        skeleton={nodes.Plane003.skeleton}
      />
    </group>
  )
}
