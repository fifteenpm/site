/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useContext, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { draco } from 'drei'
import * as C from './constants.js';
import { MaterialsContext } from './MaterialsContext';
import { useObjectAlongTubeGeometry } from '../../Common/Animations/SplineAnimator.js'

export default function Cat({ catwalk, offset, animationName, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, C.CAT, draco('/draco-gltf/'))
  const { polishedSpeckledMarbleTop } = useContext(MaterialsContext);
  const actions = useRef()
  const [prevAction, setPrevAction] = useState()
  const [curAction, setCurAction] = useState()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useObjectAlongTubeGeometry({
    object: group.current,
    tubeGeometry: catwalk,
    // speed: speed,
    offset: offset,
  })

  useEffect(() => {
    actions.current = {
      insideout: mixer.clipAction(animations[0], group.current),
      mate: mixer.clipAction(animations[1], group.current),
      roses: mixer.clipAction(animations[2], group.current),
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])

  useEffect(() => {
    if (curAction){
      console.log("SET PREV ACTION to", curAction._clip.name)
    }

    setPrevAction(curAction)
    console.log("SET CUR ACTION to", animationName)
    setCurAction(actions.current[animationName])
  }, [animationName])

  useEffect(() => {
    console.log("CUR ACTION", curAction)
    if (!curAction) return
    if (prevAction) prevAction.stop()
    curAction.play()
  }, [curAction])
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[THREE.Math.degToRad(-90), THREE.Math.degToRad(-90), 0]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          material={polishedSpeckledMarbleTop}
          geometry={nodes.Object_10001_Mesh_0001.geometry}
          skeleton={nodes.Object_10001_Mesh_0001.skeleton}
        />
        <skinnedMesh
          material={polishedSpeckledMarbleTop}
          geometry={nodes.Object_11001_Mesh_1001.geometry}
          skeleton={nodes.Object_11001_Mesh_1001.skeleton}
        />
        <skinnedMesh
          material={polishedSpeckledMarbleTop}
          geometry={nodes.Object_12001_Mesh_2001.geometry}
          skeleton={nodes.Object_12001_Mesh_2001.skeleton}
        />
        <skinnedMesh
          material={polishedSpeckledMarbleTop}
          geometry={nodes.Object_14001_Mesh_4001.geometry}
          skeleton={nodes.Object_14001_Mesh_4001.skeleton}
        />
        <skinnedMesh
          material={polishedSpeckledMarbleTop}
          geometry={nodes.Object_15001_Mesh_5001.geometry}
          skeleton={nodes.Object_15001_Mesh_5001.skeleton}
        />
      </group>
    </group>
  )
}
